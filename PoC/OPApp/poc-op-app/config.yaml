# The base path of dex and the external name of the OpenID Connect service.
# This is the canonical URL that all clients MUST use to refer to dex. If a
# path is provided, dex's HTTP service will listen at a non-root URL.
# TODO automatically set to DOCKER_HOST_IP
issuer: http://opapp.poc:5556/dex

# The storage configuration determines where dex stores its state. Supported
# options include SQL flavors and Kubernetes third party resources.
#
# See the storage document at Documentation/storage.md for further information.
storage:
  type: sqlite3
  config:
    file: dex.db

# Configuration for the HTTP endpoints.
web:
  http: 0.0.0.0:5556
# Uncomment for HTTPS options.
#  https: 0.0.0.0:5554
#  tlsCert: ./tls.crt
#  tlsKey: ./tls.key

# Configuration for telemetry
#telemetry:
#  http: 0.0.0.0:5558

# Uncomment this block to enable the gRPC API. This values MUST be different
# from the HTTP endpoints.
# grpc:
#   addr: 127.0.0.1:5557
#  tlsCert: examples/grpc-client/server.crt
#  tlsKey: examples/grpc-client/server.key
#  tlsClientCA: /etc/dex/client.crt

# Uncomment this block to enable configuration for the expiration time durations.
# expiry:
#   signingKeys: "6h"
#   idTokens: "24h"

# Options for controlling the logger.
#logger:
#  level: "error"
#  format: "text" # can also be "json"

# Uncomment this block to control which response types dex supports. For example
# the following response types enable the implicit flow for web-only clients.
# Defaults to ["code"], the code flow.
# oauth2:
#   responseTypes: ["code", "token", "id_token"]
# TODO decide flow, to me id_token is the one I want but I've read divergent opinions...(makes the token available to user_agent which can result in increased attack surface).
#oauth2:
#  repsonseTypes: ["id_token"]
oauth2:
  SkipApprovalScreen: true

# Instead of reading from an external storage, use this list of clients.
#
# If this option isn't chosen clients may be added through the gRPC API.
staticClients:
- id: poc-rp-app 
  redirectURIs: #TODO parametrize for docker compose later
  - 'http://rpapp.poc:8080/authorization-code/callback'
  name: 'PoC RP App'
  secret: 37C2F6159B63D3DD25C3F9AE5C7190EE 

connectors:
#- type: mockCallback
#  id: mock
#  name: mock
- type: daga 
  id: daga
  name: DeDis' Deniable Anonymous Group Authentication
#  redirectURI: 'http://172.17.0.1:5556/dex/callback' #not needed now but maybe cleaner for later if we move the daga login page elsewhere, then need to transmit it to remote login page + configure it at remote + at remote check that both config and received are equal, to follow same design/conventions as existing things, if we go that way maybe the remote endpoint should speak OAuth2 => even more sound
# - type: oidc
#   id: google
#   name: Google
#   config:
#     issuer: https://accounts.google.com
#     # Connector config values starting with a "$" will read from the environment.
#     clientID: $GOOGLE_CLIENT_ID
#     clientSecret: $GOOGLE_CLIENT_SECRET
#     redirectURI: http://127.0.0.1:5556/dex/callback
#     hostedDomains:
#     - $GOOGLE_HOSTED_DOMAIN

# Let dex keep a list of passwords which can be used to login to dex.
enablePasswordDB: false

# A static list of passwords to login the end user. By identifying here, dex
# won't look in its underlying storage for passwords.
#
# If this option isn't chosen users may be added through the gRPC API.
#staticPasswords:
#- email: "admin@example.com"
#  # bcrypt hash of the string "password"
#  hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
#  username: "admin"
#  userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
